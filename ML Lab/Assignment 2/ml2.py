# -*- coding: utf-8 -*-
"""ML2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10AvLOnnK141k9tkhnvh0T6WfxpoJSQzT
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/temperatures.csv")

df.shape

df.dtypes

df.isnull().sum()

df.columns

# input data
x = df['YEAR']

# output data
y = df['ANNUAL']
# y = df['JAN']

# plt.figure(figsize=(10,7))
print("Temperature of INDIA")
plt.xlabel('- YEAR -') # x-axis
plt.ylabel('- ANNUAL Temperature -') # y-axix
plt.scatter(x,y)

# there must be at least a single colum for it we are reshaping it
x.shape

x = x.values

x = x.reshape(117,1)

x.shape

from sklearn.linear_model import LinearRegression

regressor = LinearRegression()

# for training algorithm 'fit' method is used
# slope 'm'
regressor.fit(x,y)

# this is 'm' value from equation 'Y = mX + C'
regressor.coef_

# this is 'c' value from equation 'Y = mX + C'
# intercept 'c'
regressor.intercept_

regressor.predict([[2023]])

predicted = regressor.predict(x)

predicted

y

# Difference between actual and predicted is called MAE
import numpy as np

abs(y - predicted)

np.mean(abs(y - predicted))

# we can also use lib for calculating MAE
from sklearn.metrics import mean_absolute_error
mean_absolute_error(y, predicted)

# we can also use lib for calculating MSE
from sklearn.metrics import mean_squared_error
mean_squared_error(y, predicted)

# we can also use lib for calculating R - Square Error
from sklearn.metrics import r2_score
r2_score(y, predicted)

# drwing the best fit line
plt.xlabel('Year')
plt.ylabel('Annual Temperature')
plt.scatter(x, y, label = 'actual', color = 'r')
plt.plot(x, predicted, label = 'predicted', color = 'b')

# drawing the best fit line using seaborn lib
sns.regplot(x='YEAR', y='ANNUAL', data=df)

x1 = [3,4,5]

y1 = [5,3,1]

plt.xlabel=('X-axix')
plt.ylabel=('Y-axix')
plt.plot(x1, y1)
plt.show()